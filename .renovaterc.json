{
    "$schema": "https://docs.renovatebot.com/renovate-schema.json",
    "constraints": {
        "pdm": "2.24.1",
        "python": "==3.12"
    },
    "customManagers": [
        {
            "customType": "regex",
            "datasourceTemplate": "pypi",
            "description": "Match Python packages installed with pip/pipx",
            "fileMatch": [
                "^Makefile$",
                "^README\\.md$",
                "^\\.devcontainer/Dockerfile$",
                "^\\.github/workflows/.+\\.yml$",
                "^\\.gitlab/workflows/.+\\.yml$",
                "^\\.readthedocs\\.yaml$",
                "^\\.renovaterc\\.json$",
                "^docs/.+\\.md$",
                "^includes/sample\\.jinja$",
                "^template/.*\\.github.*/workflows/.+\\.yml(\\.jinja)?$",
                "^template/.*\\.gitlab.*/workflows/.+\\.yml(\\.jinja)?$",
                "^template/Makefile\\.jinja$",
                "^template/\\.devcontainer/Dockerfile\\.jinja$",
                "^template/\\.readthedocs\\.yaml\\.jinja$",
                "^template/\\.renovaterc\\.json\\.jinja$",
                "^template/docs/.+\\.md(\\.jinja)?$"
            ],
            "matchStrings": [
                "pip install.* (?<depName>.*?)(\\[.*?\\])?==(?<currentValue>.*?)[\"\n]",
                "pipx install( --force)? (?<depName>.*?)(\\[.*?\\])?==(?<currentValue>.*?)\\s",
                "pipx list --short \\| grep -q \"(?<depName>.*?)(\\[.*?\\])? (?<currentValue>.*?)\""
            ]
        },
        {
            "customType": "regex",
            "datasourceTemplate": "repology",
            "depTypeTemplate": "debian",
            "description": "Match debian packages installed in Dockerfiles",
            "fileMatch": [
                "^\\.devcontainer\\/Dockerfile$",
                "^template\\/\\.devcontainer/Dockerfile\\.jinja$"
            ],
            "matchStrings": [
                "# renovate: depName=(?<depName>.*?)\nARG .*?_VERSION=\"(?<currentValue>.*)\"\n"
            ],
            "versioningTemplate": "deb"
        },
        {
            "customType": "regex",
            "datasourceTemplate": "pypi",
            "depNameTemplate": "pdm",
            "description": "Match pdm version specified in setup-pdm GitHub Action",
            "fileMatch": [
                "^\\.github/workflows/.+\\.yml$",
                "^template/.*\\.github.*/workflows/.+\\.yml(\\.jinja)?$"
            ],
            "matchStrings": [
                "uses: pdm-project/setup-pdm[\\s\\S]+?\\sversion: (?<currentValue>.*)\n"
            ]
        },
        {
            "customType": "regex",
            "datasourceTemplate": "pypi",
            "depNameTemplate": "pdm",
            "description": "Match pdm version specified in the renovate constraints",
            "fileMatch": [
                "^\\.renovaterc\\.json$",
                "^template/\\.renovaterc\\.json\\.jinja$"
            ],
            "matchStrings": [
                "\"pdm\": \"(?<currentValue>.*)\""
            ]
        },
        {
            "customType": "regex",
            "datasourceTemplate": "github-runners",
            "depTypeTemplate": "github-runner",
            "description": "Match GitHub runner defined in GitHub Actions matrix strategy",
            "fileMatch": [
                "^\\.github/workflows/.+\\.yml$",
                "^template/.*\\.github.*/workflows/.+\\.yml(\\.jinja)?$"
            ],
            "matchStrings": [
                "# renovate: github-runner\n\\s+- (os: )?(?<depName>.*?)-(?<currentValue>.*)\n"
            ],
            "versioningTemplate": "docker"
        },
        {
            "customType": "regex",
            "datasourceTemplate": "npm",
            "description": "Match npm packages used with npx",
            "fileMatch": [
                "^\\.github/workflows/.+\\.yml$",
                "^\\.gitlab/workflows/.+\\.yml$",
                "^template/.*\\.github.*/workflows/.+\\.yml(\\.jinja)?$",
                "^template/.*\\.gitlab.*/workflows/.+\\.yml(\\.jinja)?$"
            ],
            "matchStrings": [
                "--package (?<depName>.+?)@(?<currentValue>.+?)\\s"
            ],
            "versioningTemplate": "docker"
        },
        {
            "customType": "regex",
            "datasourceTemplate": "git-tags",
            "depNameTemplate": "https://github.com/serious-scaffold/ss-python.git",
            "depTypeTemplate": "copier-template",
            "description": "Match template version specified in .copier-answers.yml",
            "fileMatch": [
                "^\\.copier-answers\\.yml$"
            ],
            "matchStrings": [
                "_commit: (?<currentValue>.*?)\n"
            ],
            "versioningTemplate": "semver"
        }
    ],
    "extends": [
        "config:best-practices",
        ":enablePreCommit",
        ":maintainLockFilesWeekly",
        ":semanticCommitTypeAll(build)"
    ],
    "gitlabci": {
        "fileMatch": [
            "^.gitlab/workflows/.*\\.yml$"
        ]
    },
    "packageRules": [
        {
            "description": "Update GitHub Action in template",
            "matchDepTypes": [
                "action"
            ],
            "postUpgradeTasks": {
                "commands": [
                    "find template -type f -exec sed -i 's|{{{depName}}}@{{{currentDigest}}} # {{{currentValue}}}|{{{depName}}}@{{{newDigest}}} # {{{newValue}}}|g' {} +",
                    "find template -type f -exec sed -i 's|{{{depName}}}@{{{currentValue}}}|{{{depName}}}@{{{newDigest}}} # {{{newValue}}}|g' {} +"
                ]
            }
        },
        {
            "description": "Update readthedocs/actions/preview GitHub Action in template",
            "matchDepNames": [
                "readthedocs/actions"
            ],
            "postUpgradeTasks": {
                "commands": [
                    "find template -type f -exec sed -i 's|{{{depName}}}/preview@{{{currentDigest}}} # {{{currentValue}}}|{{{depName}}}/preview@{{{newDigest}}} # {{{newValue}}}|g' {} +",
                    "find template -type f -exec sed -i 's|{{{depName}}}/preview@{{{currentValue}}}|{{{depName}}}/preview@{{{newDigest}}} # {{{newValue}}}|g' {} +"
                ]
            }
        },
        {
            "description": "Update GitHub Runner in template",
            "matchDepTypes": [
                "github-runner"
            ],
            "postUpgradeTasks": {
                "commands": [
                    "find template -type f -regex 'template/.*\\.github.*/workflows/.*' -exec sed -i 's|{{{depName}}}-{{{currentValue}}}|{{{depName}}}-{{{newValue}}}|g' {} +"
                ]
            }
        },
        {
            "description": "Update pre-commit hooks in template",
            "matchManagers": [
                "pre-commit"
            ],
            "postUpgradeTasks": {
                "commands": [
                    "find template -type f -name '.pre-commit-config.yaml.jinja' -exec sed -i '/{{{replace \"/\" \"\\/\" depName}}}/{N;s/rev: {{{currentValue}}}/rev: {{{newValue}}}/}' {} +"
                ]
            }
        },
        {
            "description": "Update container images in template",
            "matchDepTypes": [
                "container",
                "image",
                "image-name",
                "service-image"
            ],
            "postUpgradeTasks": {
                "commands": [
                    "find template -type f -exec sed -i 's|{{{depName}}}:{{{currentValue}}}@{{{currentDigest}}}$|{{{depName}}}:{{{newValue}}}@{{{newDigest}}}|g' {} +",
                    "find template -type f -exec sed -i 's|{{{depName}}}:{{{currentValue}}}$|{{{depName}}}:{{{newValue}}}@{{{newDigest}}}|g' {} +"
                ]
            }
        },
        {
            "description": "Update python packages in template",
            "matchDatasources": [
                "pypi"
            ],
            "postUpgradeTasks": {
                "commands": [
                    "find template -type f -exec sed -i 's|{{{depName}}} {{{currentValue}}}|{{{depName}}} {{{newValue}}}|g' {} +",
                    "find template -type f -exec sed -i 's|{{{depName}}}{{{currentValue}}}|{{{depName}}}{{{newValue}}}|g' {} +"
                ]
            }
        },
        {
            "description": "Update lock files for development dependencies",
            "matchUpdateTypes": [
                "lockFileMaintenance"
            ],
            "postUpgradeTasks": {
                "commands": [
                    "pdm update --lockfile pdm.dev.lock --no-default --dev --no-sync --update-eager"
                ]
            }
        },
        {
            "commitMessageTopic": "serious-scaffold-python",
            "description": "Update template with copier when a new version is released",
            "matchDepTypes": [
                "copier-template"
            ],
            "postUpgradeTasks": {
                "commands": [
                    "git stash",
                    "pip install copier==9.6.0",
                    "copier update --skip-answered --defaults --vcs-ref {{{newVersion}}}"
                ]
            },
            "semanticCommitScope": "copier-template"
        },
        {
            "description": "Group pdm Python package and version specified in setup-pdm GitHub Action",
            "groupName": "pdm",
            "matchDatasources": [
                "github-tags",
                "pypi"
            ],
            "matchDepNames": [
                "pdm"
            ]
        },
        {
            "description": "Group renovate docker tag and pre-commit-hooks tag",
            "groupName": "renovate",
            "matchDatasources": [
                "docker",
                "github-tags"
            ],
            "matchDepNames": [
                "ghcr.io/renovatebot/renovate",
                "renovate/renovate",
                "renovatebot/pre-commit-hooks"
            ]
        },
        {
            "description": "Group debian packages to avoid failure when multiple packages are outdated",
            "groupName": "debian packages",
            "matchDepTypes": [
                "debian"
            ]
        }
    ]
}
